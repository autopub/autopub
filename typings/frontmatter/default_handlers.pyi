"""
This type stub file was generated by pyright.
"""

import toml

"""
This type stub file was generated by pyright.
"""
__all__ = ["BaseHandler", "YAMLHandler", "JSONHandler"]
if toml: ...
DEFAULT_POST_TEMPLATE = ...

class BaseHandler:
    """
    BaseHandler lays out all the steps to detecting, splitting, parsing and
    exporting front matter metadata.

    All default handlers are subclassed from BaseHandler.
    """

    FM_BOUNDARY = ...
    START_DELIMITER = ...
    END_DELIMITER = ...
    def __init__(
        self, fm_boundary=..., start_delimiter=..., end_delimiter=...
    ) -> None: ...
    def detect(self, text):
        """
        Decide whether this handler can parse the given ``text``,
        and return True or False.

        Note that this is *not* called when passing a handler instance to
        :py:func:`frontmatter.load <frontmatter.load>` or :py:func:`loads <frontmatter.loads>`.
        """
        ...
    def split(self, text):
        """
        Split text into frontmatter and content
        """
        ...
    def load(self, fm):
        """
        Parse frontmatter and return a dict
        """
        ...
    def export(self, metadata, **kwargs):
        """
        Turn metadata back into text
        """
        ...
    def format(self, post, **kwargs):
        """
        Turn a post into a string, used in ``frontmatter.dumps``
        """
        ...

class YAMLHandler(BaseHandler):
    """
    Load and export YAML metadata. By default, this handler uses YAML's
    "safe" mode, though it's possible to override that.
    """

    FM_BOUNDARY = ...
    END_DELIMITER = ...
    def load(self, fm, **kwargs):
        """
        Parse YAML front matter. This uses yaml.SafeLoader by default.
        """
        ...
    def export(self, metadata, **kwargs):
        """
        Export metadata as YAML. This uses yaml.SafeDumper by default.
        """
        ...

class JSONHandler(BaseHandler):
    """
    Load and export JSON metadata.

    Note that changing ``START_DELIMITER`` or ``END_DELIMITER`` may break JSON parsing.
    """

    FM_BOUNDARY = ...
    START_DELIMITER = ...
    END_DELIMITER = ...
    def split(self, text): ...
    def load(self, fm, **kwargs): ...
    def export(self, metadata, **kwargs):
        "Turn metadata into JSON"
        ...

if toml:
    class TOMLHandler(BaseHandler):
        """
        Load and export TOML metadata.

        By default, split based on ``+++``.
        """

        FM_BOUNDARY = ...
        END_DELIMITER = ...
        def load(self, fm, **kwargs): ...
        def export(self, metadata, **kwargs):
            "Turn metadata into TOML"
            ...

else:
    TOMLHandler = ...
